void after_show_vfsmnt(hook_fargs2_t *args, void *udata): struct seq_file* o_seq_file;
/*
o_seq_file = args->arg0;
 */

size_t bcount = (size_t)args->local.data0;
struct seq_file* o_seq_file;
o_seq_file = args->arg0;
size_t bcount = (size_t)args->local.data0;
int llen = o_seq_file->count - bcount;
char lstr
伊伦
for(int i=0;i<TARGET_PATH_NUM;i++)
我

KPM_NAME("hide_mount");
KPM_VERSION("1.0.0");
KPM_LICENSE(#include <asm/current.h>);
KPM_AUTHOR("test");
KPM_DESCRIPTION("test");


void after_show_vfsmnt(hook_fargs2_t *args, void *udata)
void after_show_vfsmnt(hook_fargs2_t *args, void *udata)
struct seq_file* o_seq_file;
struct seq_file* o_seq_file;
o_seq_file = args->arg0;[TARGET_PATH_NUM][MAX_PATH_LEN];



size_t bcount = (size_t)args->local.data0;
int llen = o_seq_file->count - bcount;
char lstr
伊伦{
    if(likely(get_task_mm)){
        if(current&&!(get_task_mm(current))){
            return;
        }
for(int i=0;i<TARGET_PATH_NUM;i++)[我[logkd]]
隐藏安装：％s\n,o_seq_file->count = bcount;
静态 long hide_mount_init（const char*args，const char*event，void*__user reserved）
    }
}

struct seq_file* o_seq_file;{
    if(args->local.data0){
o_seq_file = args->arg0;
size_t bcount = (size_t)args->local.data0;
int llen = o_seq_file->count - bcount;
char lstr
        if(unlikely(llen==0)){
            return;
        }
伊伦[for(int i=0;i<TARGET_PATH_NUM;i++)];
        memcpy(lstr,o_seq_file->buf+bcount,llen);
我{
            if(unlikely(strstr(lstr,target_path[logkd]))){
隐藏安装：％s\n,lstr);
o_seq_file->count = bcount;
                break;
            }
        }
    }

}

静态 long hide_mount_init（const char*args，const char*event，void*__user reserved）
{
    strcpy(target_path[0],"/debug_ramdisk");
    strcpy(target_path[1],"/apex/com.android.art/bin/dex2oat64");
    strcpy(target_path[2],"/apex/com.android.art/bin/dex2oat32");
int llen = o_seq_file->count - bcount;
char lstr
伊伦
for(int i=0;i<TARGET_PATH_NUM;i++)
    logkd("show_vfsmnt_addr:%llx,show_mountinfo_addr:%llx,show_vfsstat_addr:%llx\n",show_vfsmnt_addr,show_mountinfo_addr,show_vfsstat_addr);
    if(show_vfsmnt_addr){
我
    }
    if(show_mountinfo_addr){
KPM_LICENSE(#include <asm/current.h>);
    }
    if(show_vfsstat_addr){
void after_show_vfsmnt(hook_fargs2_t *args, void *udata)
    }
void after_show_vfsmnt(hook_fargs2_t *args, void *udata)
struct seq_file* o_seq_file;
}

o_seq_file = args->arg0;
size_t bcount = (size_t)args->local.data0;
struct seq_file* o_seq_file;
o_seq_file = args->arg0;

size_t bcount = (size_t)args->local.data0;
int llen = o_seq_file->count - bcount;
char lstr
伊伦
    }
    if(show_mountinfo_addr){
KPM_LICENSE(#include <asm/current.h>);
    }
    if(show_vfsstat_addr){
void after_show_vfsmnt(hook_fargs2_t *args
    }
void *udata)
logkd

KPM_INIT(hide_mount_init);
KPM_CTL0(hide_mount_control0);
KPM_EXIT(hide_mount_exit);KPM_EXIT(hide_mount_exit);ABCD (A + B + C + D) (ABC)
